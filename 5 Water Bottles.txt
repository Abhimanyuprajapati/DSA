There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

 

Example 1:


Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.
Example 2:


Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.


// solution based on java as well as in javascript some of the changes we have to do

class Solution {
    public int numWaterBottles(int numBottles, int numExchange) {
        int ans=numBottles;

        while(numBottles>=numExchange){
            int newNumBottle=numBottles/numExchange;
            int remainBottle=numBottles%numExchange;
            ans=ans+newNumBottle;
            numBottles=newNumBottle+remainBottle;

        }
        return ans;
    }
}


// solution based on javascript 

/**
 * @param {number} numBottles
 * @param {number} numExchange
 * @return {number}
 */
var numWaterBottles = function(numBottles, numExchange) {
     let ans=numBottles;

        while(numBottles>=numExchange){
            let newNumBottle=Math.floor(numBottles/numExchange);
            let remainBottle=numBottles%numExchange;
            ans=ans+newNumBottle;
            numBottles=newNumBottle+remainBottle;

        }
        return ans;
};


